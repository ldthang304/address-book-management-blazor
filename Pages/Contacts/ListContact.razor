@page "/contacts"
@rendermode InteractiveServer
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
<BlazoredToasts />
@if (!isInitialized)
{
    <p>Loading...</p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="container-fluid p-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="m-0 flex-grow-1 fw-bold">
                        LIST CONTACT
                    </h4>
                    <TookBar />
                </div>

                <!-- Real-time Search Component -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text bg-primary text-white">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Search contacts (First Name, Last Name)..."
                                   value="@searchTerm"
                                   @oninput="OnSearchInput"
                                   autocomplete="off" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary"
                                        type="button"
                                        @onclick="ClearSearch"
                                        title="Clear search">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <small class="text-muted">
                                Showing results for: "<strong>@searchTerm</strong>"
                                (@pagedResult.TotalItems result(s) found)
                            </small>
                        }
                    </div>
                </div>

                <div class="d-flex align-items-center gap-3 mb-3">
                    <div class="d-flex align-items-center">
                        <label class="me-2 fw-bold">Sort by:</label>
                        <select class="form-select w-auto" @onchange="ApplySortBy">
                            @foreach (var sortBy in sortByOptions)
                            {
                                <option value="@sortBy.TypeKey">@sortBy.TypeValue</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex align-items-center">
                        <label class="me-2 fw-bold">Sort direction:</label>
                        <select class="form-select w-auto" @onchange="ApplySortDirection">
                            @foreach (var sortDirection in sortDirections)
                            {
                                <option value="@sortDirection.TypeKey">@sortDirection.TypeValue</option>
                            }
                        </select>
                    </div>
                </div>

                <div style="margin-bottom: 30px;">
                    <FilterBar OnFilterApplied="ApplyFiler" />
                </div>

                <!-- Results Section -->
                @if (pagedResult.Items.Any())
                {
                    <div class="row g-3">
                        @foreach (Contact c in pagedResult.Items)
                        {
                            <div class="col-md-6">
                                <ContactCard Contact="c" OnCardClick="HandleCardClicked" />
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="mb-3">
                            <i class="fas fa-search fa-3x text-muted"></i>
                        </div>
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <h5 class="text-muted">No contacts found for "@searchTerm"</h5>
                            <p class="text-muted">Try adjusting your search terms or <button type="button" class="btn btn-link p-0" @onclick="ClearSearch">clear the search</button></p>
                        }
                        else
                        {
                            <h5 class="text-muted">No contacts found</h5>
                            <p class="text-muted">There are no contacts matching the current filters.</p>
                        }
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (totalPages > 0 && pagedResult.Items.Any())
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(pageIndex == 0 ? "disabled" : "")">
                            <button class="page-link" @onclick="PrevPage">Previous</button>
                        </li>
                        @for (int i = 0; i < totalPages; i++)
                        {
                            var index = i;
                            <li class="page-item @(pageIndex == index ? "active" : "")">
                                <button type="button" class="page-link" @onclick="() => GoToPageAsync(index)">@(index + 1)</button>
                            </li>
                        }
                        <li class="page-item @(pageIndex == totalPages - 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="NextPage">Next</button>
                        </li>
                    </ul>
                </nav>
            }
        </Authorized>
        <NotAuthorized>
            <NotAuthorized/>
        </NotAuthorized>
    </AuthorizeView>
    
}