@page "/contacts/{contactId:int}"
@using MailKit.Net.Smtp
@using MimeKit
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

@if (!isInitialized)
{
    <p>Loading...</p>
}
else
{
<AuthorizeView>
    <Authorized>
            <BlazoredToasts />
            <div class="d-flex align-items-center justify-content-between p-3 border-bottom">
                <!-- Left: Avatar and Info -->
                <div class="d-flex align-items-center">
                    <div class="rounded-circle d-flex justify-content-center align-items-center me-3 overflow-hidden border"
                         style="width: 60px; height: 60px;">
                        @if (!string.IsNullOrEmpty(contact?.Image))
                        {
                            <img src="@contact.Image" alt="Avatar" style="width: 100%; height: 100%; object-fit: cover;" />
                        }
                        else
                        {
                            <!-- Default User Avatar -->
                            <div class="w-100 h-100 d-flex align-items-center justify-content-center bg-gradient"
                                 style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                                <i class="bi bi-person-fill text-white" style="font-size: 1.5rem;"></i>
                            </div>
                        }
                    </div>
                    <div>
                        <h5 class="mb-0">@($"{contact.FirstName} {contact.LastName}") <i class="@(contact.IsFavourite == true ? "bi bi-heart-fill" : "bi bi-heart") text-danger"></i></h5>
                        <small class="text-muted">@($"{contact.JobTitle} at {contact.Organization?.Name}")</small>
                    </div>
                </div>
                <!-- Right: Action Buttons -->
                <div>
                    <button class="btn btn-outline-secondary me-2" @onclick="ShowEmailModal">
                        <i class="bi bi-envelope-fill"></i>
                    </button>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                            Actions
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li>
                                <button class="dropdown-item" @onclick="NavigateToEditPage">
                                    <i class="bi bi-pencil me-2"></i>Edit
                                </button>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <button class="dropdown-item text-danger" @onclick="ShowDeleteConfirmation">
                                    <i class="bi bi-trash me-2"></i>Delete
                                </button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="container mt-4">
                <div class="row">
                    <div class="col-md-4">
                        <ContactDetail Contact="contact" Websites="websites" Phones="phones" />
                    </div>
                    <div class="col-md-5">
                        <ActivityPanel Contact="contact" />
                    </div>
                    <div class="col-md-3">
                        <MoreInfoPanel />
                    </div>
                </div>
            </div>
            @* Email Modal *@
            @if (showEmailModal)
            {
                <!-- Backdrop -->
                <div class="position-fixed top-0 start-0 w-100 h-100"
                     style="background-color: rgba(0,0,0,0.5); z-index: 1040;"
                     @onclick="HideEmailModal"></div>

                <!-- Modal -->
                <div class="position-fixed top-50 start-50 translate-middle" style="z-index: 1050; width: 90%; max-width: 600px;">
                    <div class="modal-dialog modal-dialog-centered">
                        <EditForm Model="EmailRequest" FormName="EmailForm" OnSubmit="SendEmail" Context="emailContext">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="bi bi-envelope me-2"></i>
                                    Send Email to @contact?.FirstName @contact?.LastName
                                </h5>
                                <button type="button" class="btn-close" @onclick="HideEmailModal"></button>
                            </div>
                            
                            <div class="modal-body">
                                
                                    <div class="mb-3">
                                        <label for="emailTo" class="form-label">To</label>
                                        <input type="email" class="form-control" id="emailTo" @bind="EmailRequest.To"
                                               placeholder="Enter recipient email" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="emailSubject" class="form-label">Subject</label>
                                        <input type="text" class="form-control" id="emailSubject" @bind="EmailRequest.Subject"
                                               placeholder="Enter email subject" required>
                                    </div>
                                    <div class="mb-3">
                                        <label for="emailBody" class="form-label">Message</label>
                                        <textarea class="form-control" id="emailBody" rows="6" @bind="EmailRequest.Body"
                                                  placeholder="Type your message here..." required></textarea>
                                    </div>
                                    
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="HideEmailModal" disabled="@isSendingEmail">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" @onclick="SendEmail" disabled="@isSendingEmail">
                                    @if (isSendingEmail)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-send me-1"></i>
                                        <span>Send Email</span>
                                    }
                                </button>
                            </div>
                        </div>
                        </EditForm>
                    </div>
                </div>
            }
    </Authorized>
    <NotAuthorized>
            <NotAuthorized />
    </NotAuthorized>
</AuthorizeView>
}



@* Delete Modal *@
@if (showDeleteModal)
{
    <!-- Backdrop -->
    <div class="position-fixed top-0 start-0 w-100 h-100"
         style="background-color: rgba(0,0,0,0.5); z-index: 1040;"
         @onclick="HideDeleteConfirmation"></div>

    <!-- Modal -->
    <div class="position-fixed top-50 start-50 translate-middle" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">Are you sure you want to delete this contact?</p>
                    <div class="alert alert-light border">
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle bg-primary d-flex justify-content-center align-items-center me-3 overflow-hidden"
                                 style="width: 40px; height: 40px;">
                                <img src="@contact?.Image" alt="Avatar" style="width: 100%; height: 100%; object-fit: cover;" />
                            </div>
                            <div>
                                <strong>@contact?.FirstName @contact?.LastName</strong>
                                @if (!string.IsNullOrEmpty(contact?.Organization?.Name))
                                {
                                    <br>
                                    <small class="text-muted">@contact.Organization.Name</small>
                                }
                                @if (!string.IsNullOrEmpty(contact?.JobTitle))
                                {
                                    <br>
                                    <small class="text-muted">@contact.JobTitle</small>
                                }
                            </div>
                        </div>
                    </div>
                    <p class="text-muted small mb-0">
                        <i class="bi bi-info-circle me-1"></i>
                        This action cannot be undone. All contact information, activities, and related data will be permanently deleted.
                    </p>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmation" disabled="@isDeleting">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteContact" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <i class="bi bi-trash me-1"></i>
                            <span>Delete Contact</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Existing code...
    private bool showEmailModal = false;
    private bool isSendingEmail = false;
    private ClaimsPrincipal userContext;

    [SupplyParameterFromForm(FormName = "EmailForm")]
    private EmailRequest EmailRequest { get; set; } = new();

    private void ShowEmailModal()
    {
        showEmailModal = true;
        StateHasChanged();
    }

    private void HideEmailModal()
    {
        showEmailModal = false;
        StateHasChanged();
    }

    private async Task SendEmail()
    {
        if (string.IsNullOrWhiteSpace(EmailRequest.To) || string.IsNullOrWhiteSpace(EmailRequest.Subject) || string.IsNullOrWhiteSpace(EmailRequest.Body))
        {
            // Show validation error
            return;
        }

        isSendingEmail = true;
        StateHasChanged();

        try
        {
            // Get the authenticated user's email
            var userEmail = userContext.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

            if (string.IsNullOrEmpty(userEmail))
            {
                // Handle case where user email is not available
                throw new InvalidOperationException("User email not found in claims");
            }

            var email = new MimeMessage();
            email.From.Add(MailboxAddress.Parse(userEmail));
            email.To.Add(MailboxAddress.Parse(EmailRequest.To));
            email.Subject = EmailRequest.Subject;
            email.Body = new TextPart(MimeKit.Text.TextFormat.Html)
            {
                Text = EmailRequest.Body
            };

            using var smtp = new SmtpClient();

            // TODO: Configure your actual SMTP settings
            // You'll need to replace these with your actual SMTP server configuration
            await smtp.ConnectAsync(AppConstants.EmailServer, 587, MailKit.Security.SecureSocketOptions.StartTls);
            await smtp.AuthenticateAsync(userEmail, AppConstants.AppEmailPassword);
            await smtp.SendAsync(email);
            await smtp.DisconnectAsync(true);

            // Show success toast
            // toastService.ShowSuccess("Email sent successfully!");

            HideEmailModal();
        }
        catch (Exception ex)
        {
            // Show error toast
            // toastService.ShowError($"Failed to send email: {ex.Message}");
            Console.WriteLine($"Email send error: {ex.Message}");
        }
        finally
        {
            isSendingEmail = false;
            StateHasChanged();
        }
    }
}