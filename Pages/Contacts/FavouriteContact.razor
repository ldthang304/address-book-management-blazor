@page "/contacts/favourites"
@using System.Linq.Expressions
@rendermode InteractiveServer
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
<BlazoredToasts />
@if (!isInitialized)
{
    <p>Loading...</p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="container-fluid p-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="m-0 flex-grow-1 fw-bold">
                        LIST CONTACT FAVOURITE
                    </h4>
                </div>

                <!-- Real-time Search Component -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text bg-primary text-white">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Search contacts (First Name, Last Name)..."
                                   value="@searchTerm"
                                   @oninput="OnSearchInput"
                                   autocomplete="off" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary"
                                        type="button"
                                        @onclick="ClearSearch"
                                        title="Clear search">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <small class="text-muted">
                                Showing results for: "<strong>@searchTerm</strong>"
                                (@pagedResult.TotalItems result(s) found)
                            </small>
                        }
                    </div>
                </div>

                <!-- Results Section -->
                @if (pagedResult.Items.Any())
                {
                    <div class="row g-3">
                        @foreach (Contact c in pagedResult.Items)
                        {
                            <div class="col-md-6">
                                <ContactCard Contact="c" OnCardClick="HandleCardClicked" />
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="mb-3">
                            <i class="fas fa-search fa-3x text-muted"></i>
                        </div>
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <h5 class="text-muted">No contacts found for "@searchTerm"</h5>
                            <p class="text-muted">Try adjusting your search terms or <button type="button" class="btn btn-link p-0" @onclick="ClearSearch">clear the search</button></p>
                        }
                        else
                        {
                            <h5 class="text-muted">No contacts found</h5>
                            <p class="text-muted">There are no contacts matching the current filters.</p>
                        }
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (totalPages > 0 && pagedResult.Items.Any())
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(pageIndex == 0 ? "disabled" : "")">
                            <button class="page-link" @onclick="PrevPage">Previous</button>
                        </li>
                        @for (int i = 0; i < totalPages; i++)
                        {
                            var index = i;
                            <li class="page-item @(pageIndex == index ? "active" : "")">
                                <button type="button" class="page-link" @onclick="() => GoToPageAsync(index)">@(index + 1)</button>
                            </li>
                        }
                        <li class="page-item @(pageIndex == totalPages - 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="NextPage">Next</button>
                        </li>
                    </ul>
                </nav>
            }
        </Authorized>
        <NotAuthorized>
            <NotAuthorized />
        </NotAuthorized>
    </AuthorizeView>

}
@code {
    //Private fields
    private bool isInitialized = false;
    private List<Master> sortByOptions = new();
    private List<Master> sortDirections = new();
    private PageResult<Contact> pagedResult = new();
    private ClaimsPrincipal? userContext;

    //Filters
    private List<Expression<Func<Contact, bool>>>? filters = new();

    //Page fields
    private int pageIndex = 0;
    private int pageSize = 4;
    private int totalPages = 0;
    private string? sortBy = "CreatedAt";
    private string sortDirection = "DESC";
    private int userId;

    //Search fields
    private string searchTerm = string.Empty;
    private Timer? searchTimer;
    private readonly int searchDelay = 300; // milliseconds delay for debouncing

    //Inject Services
    [Inject]
    private IContactService ContactService { get; set; } = null!;
    [Inject]
    private IToastService ToastService { get; set; } = null!;
    [Inject]
    private IMasterService MasterService { get; set; } = null!;
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private FilterService FilterService { get; set; } = null!;
    [Inject]
    private ILogger<ListContact> Logger { get; set; } = default!;

    //On Initialize method
    protected override async Task OnInitializedAsync()
    {
        //Get user in authen state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userContext = authState.User;
        userId = int.Parse(userContext.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value);

        //Get Masters
        sortByOptions = await MasterService.GetByTypeNameAsync("SortBy");
        sortDirections = await MasterService.GetByTypeNameAsync("SortDirection");

        //Add initial filters: filter by user id
        filters?.Add(c => c.AppUserId == userId);
        filters?.Add(c => c.IsFavourite == true);
        //Get Contact page result
        pagedResult = await ContactService.GetPagedAsync(pageIndex, pageSize, sortBy, sortDirection, filters);

        //Calculate totalPages initially
        totalPages = (int)Math.Ceiling((double)pagedResult.TotalItems / pageSize);

        //Start rendering component
        isInitialized = true;
    }

    //Handle Card Click
    private void HandleCardClicked(Contact contact)
    {
        NavigationManager.NavigateTo($"/contacts/add/{contact.Id}");
    }

    //Page Methods
    private async Task GoToPageAsync(int newPageIndex)
    {
        if (newPageIndex >= 0 && newPageIndex != pageIndex)
        {
            pageIndex = newPageIndex;
            pagedResult = await ContactService.GetPagedAsync(pageIndex, pageSize, sortBy, sortDirection, filters);

            // ⚠️ Update totalPages based on the new result
            totalPages = (int)Math.Ceiling((double)pagedResult.TotalItems / pageSize);

            // 🔁 Clamp the pageIndex if it's now out of range (e.g., page 2 of 1 page)
            if (pageIndex >= totalPages)
            {
                pageIndex = 0;
                pagedResult = await ContactService.GetPagedAsync(pageIndex, pageSize, sortBy, sortDirection, filters);
            }

            StateHasChanged();
        }
    }

    //Next and Previous Page handle
    private async Task NextPage() => await GoToPageAsync(pageIndex + 1);
    private async Task PrevPage() => await GoToPageAsync(pageIndex - 1);

    //Real-time Search Methods
    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Dispose existing timer
        searchTimer?.Dispose();

        // Create new timer with debounce delay
        searchTimer = new Timer(async _ => await PerformSearch(), null, searchDelay, Timeout.Infinite);
    }

    private async Task PerformSearch()
    {
        await InvokeAsync(async () =>
        {
            try
            {
                // Build search filters
                var searchFilters = FilterService.BuildSearchFilters(searchTerm);

                // Combine with existing filters
                var combinedFilters = new List<Expression<Func<Contact, bool>>>();
                if (filters != null && filters.Any())
                    combinedFilters.AddRange(filters);

                // Add search filter if exists
                if (searchFilters != null && searchFilters.Any())
                {
                    // If you need OR logic for search terms, you might need to modify this
                    // For now, this adds each search filter separately (AND logic)
                    combinedFilters.AddRange(searchFilters);
                }

                // Reset to first page when searching
                pageIndex = 0;

                // Get filtered results
                pagedResult = await ContactService.GetPagedAsync(
                    pageIndex,
                    pageSize,
                    sortBy,
                    sortDirection,
                    combinedFilters.Any() ? combinedFilters : null);

                // Update pagination
                totalPages = (int)Math.Ceiling((double)pagedResult.TotalItems / pageSize);

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error performing search for term: {SearchTerm}", searchTerm);
                ToastService.ShowError("An error occurred while searching contacts.");
            }
        });
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        searchTimer?.Dispose();

        // Trigger search with empty term to reset results
        _ = Task.Run(async () => await PerformSearch());
    }

    // Dispose timer when component is disposed
    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}