@page "/"
@rendermode InteractiveServer
@using AddressBookManagement.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject IAppUserService AppUserService
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<AuthorizeView Roles="Admin">
    <div class="container-fluid mt-4">
        <h1>Admin Dashboard</h1>

        <!-- Account Management Section -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="mb-0">Account Management</h3>
                <button class="btn btn-success" @onclick="ShowAddModal">
                    <i class="fas fa-plus"></i> Add New User
                </button>
            </div>
            <div class="card-body">
                @if (users == null)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Loading users...</p>
                    </div>
                }
                else if (!users.Any())
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> No users found.
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Role</th>
                                    <th>Created Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in users)
                                {
                                    <tr>
                                        <td>@user.Id</td>
                                        <td>@user.Name</td>
                                        <td>@user.Email</td>
                                        <td>
                                            <span class="badge @(user.Role == "Admin" ? "bg-danger" : "bg-primary")">
                                                @user.Role
                                            </span>
                                        </td>
                                        <td>@user.CreatedAt?.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(user)">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteModal(user)">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Add/Edit User Modal -->
    @if (showModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditMode ? "Edit User" : "Add New User")</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="currentUser" OnValidSubmit="SaveUser" Context="editContext">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="currentUser.Name" class="form-control" placeholder="Enter full name" />
                                <ValidationMessage For="() => currentUser.Name" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <InputText @bind-Value="currentUser.Email" class="form-control" placeholder="Enter email address" />
                                <ValidationMessage For="() => currentUser.Email" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Role</label>
                                <InputSelect @bind-Value="currentUser.Role" class="form-select">
                                    <option value="">Select a role</option>
                                    <option value="Admin">Admin</option>
                                    <option value="User">User</option>
                                </InputSelect>
                                <ValidationMessage For="() => currentUser.Role" />
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                <button type="submit" class="btn btn-primary">
                                    @(isEditMode ? "Update User" : "Create User")
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the user <strong>@userToDelete?.Name</strong>?</p>
                        <p class="text-muted">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteUser">
                            <i class="fas fa-trash"></i> Delete User
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</AuthorizeView>

<AuthorizeView Roles="User" Context="userContext">
    <!-- User Dashboard -->
    <div class="min-vh-100" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <!-- Header Section -->
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="text-center text-white py-5">
                        <div class="mb-4">
                            <i class="fas fa-address-book fa-4x mb-3" style="opacity: 0.9;"></i>
                            <h1 class="display-4 fw-bold mb-3">Welcome to AddressBook</h1>
                            <p class="lead mb-0">Hello, @userContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value!</p>
                            <p class="mb-4">Manage your contacts efficiently and stay organized</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="container mb-5">
            <div class="row g-4">
                <!-- Quick Actions Card -->
                <div class="col-lg-8">
                    <div class="card shadow-lg border-0 h-100" style="backdrop-filter: blur(10px); background: rgba(255, 255, 255, 0.95);">
                        <div class="card-body p-4">
                            <div class="d-flex align-items-center mb-4">
                                <div class="bg-primary rounded-circle p-3 me-3">
                                    <i class="fas fa-rocket text-white"></i>
                                </div>
                                <div>
                                    <h4 class="card-title mb-0">Quick Actions</h4>
                                    <p class="text-muted mb-0">Get started with your address book</p>
                                </div>
                            </div>

                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="card border-0 bg-light h-100 action-card" style="cursor: pointer; transition: all 0.3s ease;">
                                        <div class="card-body text-center p-4" @onclick="NavigateToAddContact">
                                            <div class="mb-3">
                                                <i class="fas fa-user-plus fa-2x text-success"></i>
                                            </div>
                                            <h5 class="card-title">Add New Contact</h5>
                                            <p class="card-text text-muted">Create a new contact entry</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card border-0 bg-light h-100 action-card" style="cursor: pointer; transition: all 0.3s ease;">
                                        <div class="card-body text-center p-4" @onclick="NavigateToListContact">
                                            <div class="mb-3">
                                                <i class="fas fa-list fa-2x text-info"></i>
                                            </div>
                                            <h5 class="card-title">View All Contacts</h5>
                                            <p class="card-text text-muted">Browse your contact list</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card border-0 bg-light h-100 action-card" style="cursor: pointer; transition: all 0.3s ease;">
                                        <div class="card-body text-center p-4">
                                            <div class="mb-3">
                                                <i class="fas fa-clock fa-2x text-warning"></i>
                                            </div>
                                            <h5 class="card-title">Recent Contacts</h5>
                                            <p class="card-text text-muted">View recently added contacts</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card border-0 bg-light h-100 action-card" style="cursor: pointer; transition: all 0.3s ease;">
                                        <div class="card-body text-center p-4">
                                            <div class="mb-3">
                                                <i class="fas fa-search fa-2x text-primary"></i>
                                            </div>
                                            <h5 class="card-title">Search Contacts</h5>
                                            <p class="card-text text-muted">Find specific contacts</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- User Info & Stats Card -->
                <div class="col-lg-4">
                    <div class="card shadow-lg border-0 h-100" style="backdrop-filter: blur(10px); background: rgba(255, 255, 255, 0.95);">
                        <div class="card-body p-4">
                            <div class="text-center mb-4">
                                <div class="bg-gradient-primary rounded-circle mx-auto mb-3" style="width: 80px; height: 80px; display: flex; align-items: center; justify-content: center; background: linear-gradient(45deg, #667eea, #764ba2) !important;">
                                    <i class="fas fa-user fa-2x text-white"></i>
                                </div>
                                <h5 class="mb-1">@userContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value</h5>
                                <small class="text-muted">@userContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value</small>
                            </div>

                            <hr class="my-4">

                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-muted">Account Type</span>
                                    <span class="badge bg-info rounded-pill">@userContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value</span>
                                </div>
                            </div>

                            <hr class="my-4">

                            <div class="d-grid">
                                <button class="btn btn-outline-primary"
                                    <i class="fas fa-user-cog me-2"></i>
                                    Manage Profile
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Feature Highlights -->
            <div class="row g-4 mt-4">
                <div class="col-12">
                    <div class="card shadow-lg border-0" style="backdrop-filter: blur(10px); background: rgba(255, 255, 255, 0.95);">
                        <div class="card-body p-4">
                            <h4 class="card-title mb-4">
                                <i class="fas fa-star text-warning me-2"></i>
                                Features at Your Fingertips
                            </h4>
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <div class="d-flex align-items-start">
                                        <div class="bg-light rounded-circle p-2 me-3">
                                            <i class="fas fa-search text-primary"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">Smart Search</h6>
                                            <small class="text-muted">Real-time search across all contact fields</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="d-flex align-items-start">
                                        <div class="bg-light rounded-circle p-2 me-3">
                                            <i class="fas fa-filter text-success"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">Advanced Filters</h6>
                                            <small class="text-muted">Filter contacts by various criteria</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="d-flex align-items-start">
                                        <div class="bg-light rounded-circle p-2 me-3">
                                            <i class="fas fa-sort text-info"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">Flexible Sorting</h6>
                                            <small class="text-muted">Sort your contacts any way you prefer</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .action-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
        }
        
        .bg-gradient-primary {
            background: linear-gradient(45deg, #667eea, #764ba2) !important;
        }
    </style>
</AuthorizeView>

<AuthorizeView>
    <NotAuthorized>
        <div class="min-vh-100 d-flex align-items-center justify-content-center" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
            <div class="text-center text-white">
                <div class="mb-4">
                    <i class="fas fa-lock fa-4x mb-4" style="opacity: 0.8;"></i>
                    <h1 class="display-5 fw-bold mb-3">Access Required</h1>
                    <p class="lead mb-4">Please sign in to access your address book</p>
                    <button class="btn btn-light btn-lg px-4"
                        <i class="fas fa-sign-in-alt me-2"></i>
                        Sign In
                    </button>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    private IToastService ToastService { get; set; } = null!;

    // User dashboard stats
    private int totalContacts = 156;
    private int contactsThisMonth = 12;

    private List<AppUser> users = new();
    private AppUser currentUser = new();
    private AppUser? userToDelete;
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        // You can load user-specific stats here
        // totalContacts = await ContactService.GetUserContactCountAsync();
        // contactsThisMonth = await ContactService.GetContactsThisMonthAsync();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await AppUserService.GetAllAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading users: {ex.Message}");
        }
    }

    private void ShowAddModal()
    {
        currentUser = new AppUser();
        isEditMode = false;
        showModal = true;
    }

    private void ShowEditModal(AppUser user)
    {
        currentUser = new AppUser
        {
            Id = user.Id,
            Name = user.Name,
            Email = user.Email,
            Role = user.Role
        };
        isEditMode = true;
        showModal = true;
    }

    private void ShowDeleteModal(AppUser user)
    {
        userToDelete = user;
        showDeleteModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentUser = new AppUser();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        userToDelete = null;
    }

    private async Task SaveUser()
    {
        try
        {
            if (isEditMode)
            {
                var existingUser = users.FirstOrDefault(u => u.Id == currentUser.Id);
                if (existingUser != null)
                {
                    existingUser.Name = currentUser.Name;
                    existingUser.Email = currentUser.Email;
                    existingUser.Role = currentUser.Role;
                    existingUser.UpdatedAt = DateTime.Now;
                }

                ToastService.ShowSuccess("User updated successfully!");
            }
            else
            {
                currentUser.Id = users.Max(u => u.Id) + 1;
                currentUser.CreatedAt = DateTime.Now;
                users.Add(currentUser);

                ToastService.ShowSuccess("User created successfully!");
            }

            CloseModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving user: {ex.Message}");
        }
    }

    private async Task DeleteUser()
    {
        if (userToDelete == null) return;

        try
        {
            await AppUserService.DeleteAsync(userToDelete.Id);
            users.Remove(userToDelete);

            ToastService.ShowSuccess($"User '{userToDelete.Name}' deleted successfully!");
            CloseDeleteModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error deleting user: {ex.Message}");
        }
    }
    private void NavigateToAddContact(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("contacts/add");
    }
    private void NavigateToListContact(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("contacts");
    }
}